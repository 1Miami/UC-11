/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sosrs;
import javax.swing.*;
import java.util.List;
import java.util.Arrays;
import sosrs.DoencaManager;
import sosrs.Doenca;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;


public class Identificador extends javax.swing.JFrame {
 private static final String DB_URL = "jdbc:mysql://localhost:3306/sosrs";
    private static final String DB_USER = "root"; // Substitua pelo seu usuário do MySQL
    private static final String DB_PASSWORD = "root"; // Substitua pela sua senha do MySQL
   
    
    /**
     * Creates new form Identificador
     */
    public Identificador() {
        initComponents();
        setupEvents();
    }
     private void setupEvents() {
        EnviarSintomasBTN.addActionListener(e -> identificarDoencas());
    }
     
     private void identificarDoencas() {
        String sintomas = TxtIdentificar.getText().trim().toLowerCase(); // Converter para minúsculas

        if (sintomas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, informe os sintomas.");
            return;
        }

        DefaultListModel<String> model = new DefaultListModel<>();
        StringBuilder resultados = new StringBuilder(); // Usado para armazenar o texto final

        // Exibe os sintomas informados para depuração
        System.out.println("Sintomas informados: " + sintomas);

        try {
            List<Doenca> doencas = new DoencaDAO().getDoencas();
            for (Doenca doenca : doencas) {
                boolean matchFound = false;
                for (String sintoma : sintomas.split("\\s*,\\s*")) { // Ajustado para lidar com espaços
                    String sintomaLimpo = sintoma.trim().toLowerCase(); // Converter o sintoma para minúsculas

                    // Exibe os sintomas da doença para depuração
                    System.out.println("Sintomas da doença: " + doenca.getSintomas());

                    if (doenca.getSintomas().stream()
                        .map(String::toLowerCase) // Converter sintomas da doença para minúsculas
                        .anyMatch(s -> s.equals(sintomaLimpo))) {
                        matchFound = true;
                        break;
                    }
                }
                if (matchFound) {
                    model.addElement(doenca.toString());
                    resultados.append(doenca.toString()).append("\n");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados.");
        }

        if (model.isEmpty()) {
            model.addElement("Nenhuma doença encontrada com esses sintomas.");
            resultados.append("Nenhuma doença encontrada com esses sintomas.");
        }

        // Atualiza o JTextArea com os resultados
        resultadoTextArea.setText(resultados.toString());
     } 
     
     
private List<Doenca> buscarDoencasDoBanco() throws SQLException {
         List<Doenca> doencas = new ArrayList<>();
        String query = "SELECT * FROM doencas";

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String nome = resultSet.getString("nome");
                String sintomas = resultSet.getString("sintomas");
                String tratamento = resultSet.getString("tratamento");
                String informacoes = resultSet.getString("informacoes");
                boolean picada = resultSet.getBoolean("picada");

                Doenca doenca = new Doenca(id, nome, Arrays.asList(sintomas.split(",")), tratamento, informacoes, picada);
                doencas.add(doenca);
            }
        }

        return doencas;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TxtIdentificar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        MostrarPossiveisDeTratamento = new javax.swing.JScrollPane();
        resultadoTextArea = new javax.swing.JTextArea();
        EnviarSintomasBTN = new javax.swing.JButton();

        TxtIdentificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtIdentificarActionPerformed(evt);
            }
        });

        jLabel1.setText("Que tipo de sintomas voce esta tendo?");

        resultadoTextArea.setColumns(20);
        resultadoTextArea.setRows(5);
        MostrarPossiveisDeTratamento.setViewportView(resultadoTextArea);

        EnviarSintomasBTN.setText("Enviar Sintomas!");
        EnviarSintomasBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarSintomasBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                        .addComponent(TxtIdentificar))
                    .addComponent(EnviarSintomasBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MostrarPossiveisDeTratamento, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtIdentificar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EnviarSintomasBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(MostrarPossiveisDeTratamento, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnviarSintomasBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarSintomasBTNActionPerformed
        identificarDoencas();
    }//GEN-LAST:event_EnviarSintomasBTNActionPerformed

    private void TxtIdentificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtIdentificarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtIdentificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Identificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Identificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Identificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Identificador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Identificador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EnviarSintomasBTN;
    private javax.swing.JScrollPane MostrarPossiveisDeTratamento;
    private javax.swing.JTextField TxtIdentificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea resultadoTextArea;
    // End of variables declaration//GEN-END:variables
}
